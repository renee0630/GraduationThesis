
Project0802.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045fc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000050  24000000  080048ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000344  24000050  0800493c  00020050  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  24000394  0800493c  00020394  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013d06  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000023ce  00000000  00000000  00033d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d38  00000000  00000000  00036158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c50  00000000  00000000  00036e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034829  00000000  00000000  00037ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f199  00000000  00000000  0006c309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145f6a  00000000  00000000  0007b4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c140c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036e0  00000000  00000000  001c145c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000050 	.word	0x24000050
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080048b4 	.word	0x080048b4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000054 	.word	0x24000054
 800030c:	080048b4 	.word	0x080048b4

08000310 <_ZN8CAR_INFOC1Ev>:

typedef struct {
	double Vx = 0.0;
	double Vy = 0.0;
	double Omega = 0.0;
} CAR_INFO;
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	f04f 0200 	mov.w	r2, #0
 800031e:	f04f 0300 	mov.w	r3, #0
 8000322:	e9c1 2300 	strd	r2, r3, [r1]
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	f04f 0200 	mov.w	r2, #0
 800032c:	f04f 0300 	mov.w	r3, #0
 8000330:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	f04f 0200 	mov.w	r2, #0
 800033a:	f04f 0300 	mov.w	r3, #0
 800033e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <_ZN7MOTOR_VC1Ev>:
	double V1 = 0.0;
	double V2 = 0.0;
	double V3 = 0.0;
	double V4 = 0.0;

} MOTOR_V;
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	f04f 0200 	mov.w	r2, #0
 800035e:	f04f 0300 	mov.w	r3, #0
 8000362:	e9c1 2300 	strd	r2, r3, [r1]
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	f04f 0200 	mov.w	r2, #0
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	f04f 0200 	mov.w	r2, #0
 800037a:	f04f 0300 	mov.w	r3, #0
 800037e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	f04f 0200 	mov.w	r2, #0
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <_ZN11DiffChassisC1Eii>:

#include "motor_controller.h"

int direction[4] = {1, -1, 1, 1};

DiffChassis::DiffChassis(const int motor1_index, const int motor2_index)
 800039e:	b580      	push	{r7, lr}
 80003a0:	b084      	sub	sp, #16
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	60f8      	str	r0, [r7, #12]
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
    : motor1_index(motor1_index), motor2_index(motor2_index) {}
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	3308      	adds	r3, #8
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ffa8 	bl	8000310 <_ZN8CAR_INFOC1Ev>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3320      	adds	r3, #32
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ffa3 	bl	8000310 <_ZN8CAR_INFOC1Ev>
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3338      	adds	r3, #56	; 0x38
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff9e 	bl	8000310 <_ZN8CAR_INFOC1Ev>
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3350      	adds	r3, #80	; 0x50
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ffb9 	bl	8000350 <_ZN7MOTOR_VC1Ev>
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	3370      	adds	r3, #112	; 0x70
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffb4 	bl	8000350 <_ZN7MOTOR_VC1Ev>
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <_ZN11DiffChassis15Set_GoalCarInfoE8CAR_INFO>:


MOTOR_V DiffChassis::Set_GoalCarInfo(CAR_INFO goal) {
 80003f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80003f6:	b098      	sub	sp, #96	; 0x60
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80003fc:	eeb0 5b40 	vmov.f64	d5, d0
 8000400:	eeb0 6b41 	vmov.f64	d6, d1
 8000404:	eeb0 7b42 	vmov.f64	d7, d2
 8000408:	ed87 5b08 	vstr	d5, [r7, #32]
 800040c:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8000410:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	GoalCarInfo.Vx = goal.Vx;
 8000414:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800041a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	GoalCarInfo.Vy = goal.Vy;
 800041e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000424:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	GoalCarInfo.Omega = goal.Omega;
 8000428:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800042c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800042e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Set_MotorVGoal();
 8000432:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000434:	f000 f828 	bl	8000488 <_ZN11DiffChassis14Set_MotorVGoalEv>

	return GoalMotorV;
 8000438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800043a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800043e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8000442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000446:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800044a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800044e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8000452:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8000456:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800045a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800045e:	ec49 8b14 	vmov	d4, r8, r9
 8000462:	ec45 4b15 	vmov	d5, r4, r5
 8000466:	ec41 0b16 	vmov	d6, r0, r1
 800046a:	ec43 2b17 	vmov	d7, r2, r3
}
 800046e:	eeb0 0b44 	vmov.f64	d0, d4
 8000472:	eeb0 1b45 	vmov.f64	d1, d5
 8000476:	eeb0 2b46 	vmov.f64	d2, d6
 800047a:	eeb0 3b47 	vmov.f64	d3, d7
 800047e:	3760      	adds	r7, #96	; 0x60
 8000480:	46bd      	mov	sp, r7
 8000482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000488 <_ZN11DiffChassis14Set_MotorVGoalEv>:

void DiffChassis::Set_MotorVGoal() {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	GoalMotorV.V1 = (GoalCarInfo.Vx - (GoalCarInfo.Omega * WHEEL_DISTANCE / 2)) * direction[motor1_index]; // motor1 is left motor
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	ed93 6b08 	vldr	d6, [r3, #32]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800049c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8000518 <_ZN11DiffChassis14Set_MotorVGoalEv+0x90>
 80004a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80004a4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80004a8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80004ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <_ZN11DiffChassis14Set_MotorVGoalEv+0x98>)
 80004b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ba:	ee07 3a90 	vmov	s15, r3
 80004be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80004c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	GoalMotorV.V2 = (GoalCarInfo.Vx + (GoalCarInfo.Omega * WHEEL_DISTANCE / 2)) * direction[motor2_index]; // motor2 is right motor
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	ed93 6b08 	vldr	d6, [r3, #32]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80004d8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000518 <_ZN11DiffChassis14Set_MotorVGoalEv+0x90>
 80004dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80004e0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80004e4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80004e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <_ZN11DiffChassis14Set_MotorVGoalEv+0x98>)
 80004f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f6:	ee07 3a90 	vmov	s15, r3
 80004fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80004fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	f3af 8000 	nop.w
 8000518:	9999999a 	.word	0x9999999a
 800051c:	3fc99999 	.word	0x3fc99999
 8000520:	24000000 	.word	0x24000000
 8000524:	00000000 	.word	0x00000000

08000528 <_ZN11DiffChassis17Update_NowCarInfoEff>:

void DiffChassis::Update_NowCarInfo(float motor1_Vnow, float motor2_Vnow){
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	ed87 0a02 	vstr	s0, [r7, #8]
 8000534:	edc7 0a01 	vstr	s1, [r7, #4]
	NowMotorV.V1 = motor1_Vnow;
 8000538:	edd7 7a02 	vldr	s15, [r7, #8]
 800053c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	NowMotorV.V2 = motor2_Vnow;
 8000546:	edd7 7a01 	vldr	s15, [r7, #4]
 800054a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78

	NowCarInfo.Vx = (motor1_Vnow*direction[motor1_index] + motor2_Vnow*direction[motor2_index])/2;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a2d      	ldr	r2, [pc, #180]	; (8000610 <_ZN11DiffChassis17Update_NowCarInfoEff+0xe8>)
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	ee07 3a90 	vmov	s15, r3
 8000562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000566:	edd7 7a02 	vldr	s15, [r7, #8]
 800056a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	4a27      	ldr	r2, [pc, #156]	; (8000610 <_ZN11DiffChassis17Update_NowCarInfoEff+0xe8>)
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000580:	edd7 7a01 	vldr	s15, [r7, #4]
 8000584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800058c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	ed83 7b02 	vstr	d7, [r3, #8]
	NowCarInfo.Vy = 0; // differential wheels don't have side move
 800059e:	68f9      	ldr	r1, [r7, #12]
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	f04f 0300 	mov.w	r3, #0
 80005a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	NowCarInfo.Omega = (motor2_Vnow*direction[motor1_index] - motor1_Vnow*direction[motor2_index])/WHEEL_DISTANCE;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <_ZN11DiffChassis17Update_NowCarInfoEff+0xe8>)
 80005b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b6:	ee07 3a90 	vmov	s15, r3
 80005ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005be:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <_ZN11DiffChassis17Update_NowCarInfoEff+0xe8>)
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80005d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80005dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80005e8:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000608 <_ZN11DiffChassis17Update_NowCarInfoEff+0xe0>
 80005ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	9999999a 	.word	0x9999999a
 800060c:	3fc99999 	.word	0x3fc99999
 8000610:	24000000 	.word	0x24000000
 8000614:	00000000 	.word	0x00000000

08000618 <_ZN11DiffChassis21Update_NowCarLocationEff>:

void DiffChassis::Update_NowCarLocation(float temp_dis1, float temp_dis2){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	ed87 0a02 	vstr	s0, [r7, #8]
 8000624:	edc7 0a01 	vstr	s1, [r7, #4]
	NowCarLocation.Vx += (temp_dis1*direction[motor1_index] + temp_dis2*direction[motor2_index])/2;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <_ZN11DiffChassis21Update_NowCarLocationEff+0xe0>)
 8000634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000640:	edd7 7a02 	vldr	s15, [r7, #8]
 8000644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a2a      	ldr	r2, [pc, #168]	; (80006f8 <_ZN11DiffChassis21Update_NowCarLocationEff+0xe0>)
 800064e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000652:	ee07 3a90 	vmov	s15, r3
 8000656:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800065a:	edd7 7a01 	vldr	s15, [r7, #4]
 800065e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000666:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800066a:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800066e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000672:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	NowCarLocation.Vy = 0; // differential wheels don't have side move
 800067c:	68f9      	ldr	r1, [r7, #12]
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	NowCarLocation.Omega += (temp_dis2*direction[motor2_index] - temp_dis1*direction[motor1_index])/WHEEL_DISTANCE;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <_ZN11DiffChassis21Update_NowCarLocationEff+0xe0>)
 8000696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <_ZN11DiffChassis21Update_NowCarLocationEff+0xe0>)
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80006bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80006c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80006c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80006cc:	ed9f 4b08 	vldr	d4, [pc, #32]	; 80006f0 <_ZN11DiffChassis21Update_NowCarLocationEff+0xd8>
 80006d0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80006d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	f3af 8000 	nop.w
 80006f0:	9999999a 	.word	0x9999999a
 80006f4:	3fc99999 	.word	0x3fc99999
 80006f8:	24000000 	.word	0x24000000

080006fc <_ZN11DiffChassis13Get_NowMotorVEv>:

MOTOR_V DiffChassis::Get_NowMotorV(){
 80006fc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000700:	b093      	sub	sp, #76	; 0x4c
 8000702:	af00      	add	r7, sp, #0
 8000704:	6278      	str	r0, [r7, #36]	; 0x24
	return NowMotorV;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800070c:	f103 0570 	add.w	r5, r3, #112	; 0x70
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800071c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8000720:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000724:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800072c:	ec49 8b14 	vmov	d4, r8, r9
 8000730:	ec45 4b15 	vmov	d5, r4, r5
 8000734:	ec41 0b16 	vmov	d6, r0, r1
 8000738:	ec43 2b17 	vmov	d7, r2, r3
}
 800073c:	eeb0 0b44 	vmov.f64	d0, d4
 8000740:	eeb0 1b45 	vmov.f64	d1, d5
 8000744:	eeb0 2b46 	vmov.f64	d2, d6
 8000748:	eeb0 3b47 	vmov.f64	d3, d7
 800074c:	374c      	adds	r7, #76	; 0x4c
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000754:	4770      	bx	lr

08000756 <_ZN11DiffChassis14Get_NowCarInfoEv>:

CAR_INFO DiffChassis::Get_NowCarInfo(){
 8000756:	b4b0      	push	{r4, r5, r7}
 8000758:	b08f      	sub	sp, #60	; 0x3c
 800075a:	af00      	add	r7, sp, #0
 800075c:	61f8      	str	r0, [r7, #28]
	return NowCarInfo;
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	f107 0420 	add.w	r4, r7, #32
 8000764:	f103 0508 	add.w	r5, r3, #8
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000770:	e884 0003 	stmia.w	r4, {r0, r1}
 8000774:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000778:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800077c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000780:	ec45 4b15 	vmov	d5, r4, r5
 8000784:	ec41 0b16 	vmov	d6, r0, r1
 8000788:	ec43 2b17 	vmov	d7, r2, r3
}
 800078c:	eeb0 0b45 	vmov.f64	d0, d5
 8000790:	eeb0 1b46 	vmov.f64	d1, d6
 8000794:	eeb0 2b47 	vmov.f64	d2, d7
 8000798:	373c      	adds	r7, #60	; 0x3c
 800079a:	46bd      	mov	sp, r7
 800079c:	bcb0      	pop	{r4, r5, r7}
 800079e:	4770      	bx	lr

080007a0 <_ZN11DiffChassis18Get_NowCarLocationEv>:

CAR_INFO DiffChassis::Get_NowCarLocation(){
 80007a0:	b4b0      	push	{r4, r5, r7}
 80007a2:	b08f      	sub	sp, #60	; 0x3c
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	61f8      	str	r0, [r7, #28]
	return NowCarLocation;
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f107 0420 	add.w	r4, r7, #32
 80007ae:	f103 0538 	add.w	r5, r3, #56	; 0x38
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80007be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80007c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80007c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80007ca:	ec45 4b15 	vmov	d5, r4, r5
 80007ce:	ec41 0b16 	vmov	d6, r0, r1
 80007d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80007d6:	eeb0 0b45 	vmov.f64	d0, d5
 80007da:	eeb0 1b46 	vmov.f64	d1, d6
 80007de:	eeb0 2b47 	vmov.f64	d2, d7
 80007e2:	373c      	adds	r7, #60	; 0x3c
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bcb0      	pop	{r4, r5, r7}
 80007e8:	4770      	bx	lr
 80007ea:	0000      	movs	r0, r0
 80007ec:	0000      	movs	r0, r0
	...

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f001 fad8 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f85e 	bl	80008b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 fb34 	bl	8000e68 <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 8000800:	f000 f986 	bl	8000b10 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8000804:	f000 f9e4 	bl	8000bd0 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8000808:	f000 fa82 	bl	8000d10 <_ZL13MX_TIM15_Initv>
  MX_TIM3_Init();
 800080c:	f000 f920 	bl	8000a50 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8000810:	f000 fa3e 	bl	8000c90 <_ZL12MX_TIM6_Initv>
  MX_TIM2_Init();
 8000814:	f000 f8be 	bl	8000994 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // motor 1
 8000818:	2100      	movs	r1, #0
 800081a:	481d      	ldr	r0, [pc, #116]	; (8000890 <main+0xa0>)
 800081c:	f002 fe76 	bl	800350c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // motor 2
 8000820:	2104      	movs	r1, #4
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <main+0xa0>)
 8000824:	f002 fe72 	bl	800350c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // encoder 1
 8000828:	213c      	movs	r1, #60	; 0x3c
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <main+0xa4>)
 800082c:	f003 f830 	bl	8003890 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // encoder 2
 8000830:	213c      	movs	r1, #60	; 0x3c
 8000832:	4819      	ldr	r0, [pc, #100]	; (8000898 <main+0xa8>)
 8000834:	f003 f82c 	bl	8003890 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // encoder 2
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <main+0xac>)
 800083c:	f003 f828 	bl	8003890 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // encoder 2
 8000840:	213c      	movs	r1, #60	; 0x3c
 8000842:	4817      	ldr	r0, [pc, #92]	; (80008a0 <main+0xb0>)
 8000844:	f003 f824 	bl	8003890 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6); // timer interrupt
 8000848:	4816      	ldr	r0, [pc, #88]	; (80008a4 <main+0xb4>)
 800084a:	f002 fd81 	bl	8003350 <HAL_TIM_Base_Start_IT>

  dt = 0.001;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <main+0xb8>)
 8000850:	4a16      	ldr	r2, [pc, #88]	; (80008ac <main+0xbc>)
 8000852:	601a      	str	r2, [r3, #0]
  t = 1;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <main+0xc0>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
	car_goal.Vx = -0.2;
 800085a:	4916      	ldr	r1, [pc, #88]	; (80008b4 <main+0xc4>)
 800085c:	a30a      	add	r3, pc, #40	; (adr r3, 8000888 <main+0x98>)
 800085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000862:	e9c1 2300 	strd	r2, r3, [r1]
	car_goal.Vy = 0;
 8000866:	4913      	ldr	r1, [pc, #76]	; (80008b4 <main+0xc4>)
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	e9c1 2302 	strd	r2, r3, [r1, #8]
	car_goal.Omega = 0;
 8000874:	490f      	ldr	r1, [pc, #60]	; (80008b4 <main+0xc4>)
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000882:	e7fe      	b.n	8000882 <main+0x92>
 8000884:	f3af 8000 	nop.w
 8000888:	9999999a 	.word	0x9999999a
 800088c:	bfc99999 	.word	0xbfc99999
 8000890:	240001e8 	.word	0x240001e8
 8000894:	24000104 	.word	0x24000104
 8000898:	24000150 	.word	0x24000150
 800089c:	240000b8 	.word	0x240000b8
 80008a0:	2400006c 	.word	0x2400006c
 80008a4:	2400019c 	.word	0x2400019c
 80008a8:	24000010 	.word	0x24000010
 80008ac:	3a83126f 	.word	0x3a83126f
 80008b0:	240002c8 	.word	0x240002c8
 80008b4:	240002d0 	.word	0x240002d0

080008b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	; 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	224c      	movs	r2, #76	; 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 ffec 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 ffe6 	bl	80048a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d8:	2002      	movs	r0, #2
 80008da:	f001 fdc9 	bl	8002470 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <_Z18SystemClock_Configv+0xd8>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ea:	4a29      	ldr	r2, [pc, #164]	; (8000990 <_Z18SystemClock_Configv+0xd8>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <_Z18SystemClock_Configv+0xd8>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <_Z18SystemClock_Configv+0xd8>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d000      	beq.n	8000918 <_Z18SystemClock_Configv+0x60>
 8000916:	e7f2      	b.n	80008fe <_Z18SystemClock_Configv+0x46>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000918:	2302      	movs	r3, #2
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091c:	2301      	movs	r3, #1
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fdd9 	bl	80024e4 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000942:	f000 fc57 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	; 0x3f
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f002 f967 	bl	8002c40 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8000982:	f000 fc37 	bl	80011f4 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3770      	adds	r7, #112	; 0x70
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	58024800 	.word	0x58024800

08000994 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2224      	movs	r2, #36	; 0x24
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 ff7e 	bl	80048a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009da:	2301      	movs	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009f2:	2301      	movs	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000a06:	f002 fe9d 	bl	8003744 <HAL_TIM_Encoder_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf14      	ite	ne
 8000a10:	2301      	movne	r3, #1
 8000a12:	2300      	moveq	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000a1a:	f000 fbeb 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <_ZL12MX_TIM2_Initv+0xb8>)
 8000a2c:	f003 fdbc 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000a40:	f000 fbd8 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2400006c 	.word	0x2400006c

08000a50 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2224      	movs	r2, #36	; 0x24
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 ff20 	bl	80048a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <_ZL12MX_TIM3_Initv+0xbc>)
 8000a72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aac:	2301      	movs	r3, #1
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4619      	mov	r1, r3
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ac0:	f002 fe40 	bl	8003744 <HAL_TIM_Encoder_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8000ad4:	f000 fb8e 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ae6:	f003 fd5f 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8000afa:	f000 fb7b 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3730      	adds	r7, #48	; 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	240000b8 	.word	0x240000b8
 8000b0c:	40000400 	.word	0x40000400

08000b10 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2224      	movs	r2, #36	; 0x24
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fec0 	bl	80048a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b30:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <_ZL12MX_TIM4_Initv+0xbc>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000b80:	f002 fde0 	bl	8003744 <HAL_TIM_Encoder_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8000b94:	f000 fb2e 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000ba6:	f003 fcff 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	bf14      	ite	ne
 8000bb0:	2301      	movne	r3, #1
 8000bb2:	2300      	moveq	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8000bba:	f000 fb1b 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3730      	adds	r7, #48	; 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	24000104 	.word	0x24000104
 8000bcc:	40000800 	.word	0x40000800

08000bd0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2224      	movs	r2, #36	; 0x24
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fe60 	bl	80048a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <_ZL12MX_TIM5_Initv+0xbc>)
 8000bf2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000c02:	f04f 32ff 	mov.w	r2, #4294967295
 8000c06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000c40:	f002 fd80 	bl	8003744 <HAL_TIM_Encoder_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf14      	ite	ne
 8000c4a:	2301      	movne	r3, #1
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <_ZL12MX_TIM5_Initv+0x88>
  {
    Error_Handler();
 8000c54:	f000 face 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <_ZL12MX_TIM5_Initv+0xb8>)
 8000c66:	f003 fc9f 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_ZL12MX_TIM5_Initv+0xae>
  {
    Error_Handler();
 8000c7a:	f000 fabb 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3730      	adds	r7, #48	; 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000150 	.word	0x24000150
 8000c8c:	40000c00 	.word	0x40000c00

08000c90 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <_ZL12MX_TIM6_Initv+0x7c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 127;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000ca8:	227f      	movs	r2, #127	; 0x7f
 8000caa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cc0:	4811      	ldr	r0, [pc, #68]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000cc2:	f002 faed 	bl	80032a0 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 fa8d 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <_ZL12MX_TIM6_Initv+0x78>)
 8000ce8:	f003 fc5e 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8000cfc:	f000 fa7a 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2400019c 	.word	0x2400019c
 8000d0c:	40001000 	.word	0x40001000

08000d10 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b098      	sub	sp, #96	; 0x60
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2234      	movs	r2, #52	; 0x34
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fdb1 	bl	80048a4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d44:	4a47      	ldr	r2, [pc, #284]	; (8000e64 <_ZL13MX_TIM15_Initv+0x154>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000d48:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 6399;
 8000d54:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d56:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000d5a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d6e:	483c      	ldr	r0, [pc, #240]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d70:	f002 fb74 	bl	800345c <HAL_TIM_PWM_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf14      	ite	ne
 8000d7a:	2301      	movne	r3, #1
 8000d7c:	2300      	moveq	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <_ZL13MX_TIM15_Initv+0x78>
  {
    Error_Handler();
 8000d84:	f000 fa36 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d94:	4619      	mov	r1, r3
 8000d96:	4832      	ldr	r0, [pc, #200]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000d98:	f003 fc06 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <_ZL13MX_TIM15_Initv+0xa0>
  {
    Error_Handler();
 8000dac:	f000 fa22 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db0:	2360      	movs	r3, #96	; 0x60
 8000db2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000dd6:	f002 ff09 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf14      	ite	ne
 8000de0:	2301      	movne	r3, #1
 8000de2:	2300      	moveq	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <_ZL13MX_TIM15_Initv+0xde>
  {
    Error_Handler();
 8000dea:	f000 fa03 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df2:	2204      	movs	r2, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000df8:	f002 fef8 	bl	8003bec <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <_ZL13MX_TIM15_Initv+0x100>
  {
    Error_Handler();
 8000e0c:	f000 f9f2 	bl	80011f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	480a      	ldr	r0, [pc, #40]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000e38:	f003 fc52 	bl	80046e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <_ZL13MX_TIM15_Initv+0x140>
  {
    Error_Handler();
 8000e4c:	f000 f9d2 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <_ZL13MX_TIM15_Initv+0x150>)
 8000e52:	f000 fe67 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 8000e56:	bf00      	nop
 8000e58:	3760      	adds	r7, #96	; 0x60
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	240001e8 	.word	0x240001e8
 8000e64:	40014000 	.word	0x40014000

08000e68 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a4e      	ldr	r2, [pc, #312]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <_ZL12MX_GPIO_Initv+0x158>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2108      	movs	r1, #8
 8000f18:	482a      	ldr	r0, [pc, #168]	; (8000fc4 <_ZL12MX_GPIO_Initv+0x15c>)
 8000f1a:	f001 fa8f 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	4828      	ldr	r0, [pc, #160]	; (8000fc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000f26:	f001 fa89 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f30:	4826      	ldr	r0, [pc, #152]	; (8000fcc <_ZL12MX_GPIO_Initv+0x164>)
 8000f32:	f001 fa83 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <_ZL12MX_GPIO_Initv+0x168>)
 8000f3e:	f001 fa7d 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f42:	2308      	movs	r3, #8
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <_ZL12MX_GPIO_Initv+0x15c>)
 8000f5a:	f001 f8c7 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000f78:	f001 f8b8 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <_ZL12MX_GPIO_Initv+0x164>)
 8000f96:	f001 f8a9 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <_ZL12MX_GPIO_Initv+0x168>)
 8000fb4:	f001 f89a 	bl	80020ec <HAL_GPIO_Init>

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58021000 	.word	0x58021000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	ed2d 8b02 	vpush	{d8}
 8000fda:	b0a4      	sub	sp, #144	; 0x90
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a73      	ldr	r2, [pc, #460]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	f040 80dd 	bne.w	80011a6 <HAL_TIM_PeriodElapsedCallback+0x1d2>
		t += 1;
 8000fec:	4b72      	ldr	r3, [pc, #456]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a71      	ldr	r2, [pc, #452]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ff4:	6013      	str	r3, [r2, #0]
		MotorController motor1(0, &htim15, TIM_CHANNEL_1, &htim5, GPIOE, GPIO_PIN_3, kp[0], ki[0], 1, -1); // motor1 is left motor
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	f107 0008 	add.w	r0, r7, #8
 8001006:	2308      	movs	r3, #8
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	4b6e      	ldr	r3, [pc, #440]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8001016:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800101a:	eef0 0a47 	vmov.f32	s1, s14
 800101e:	eeb0 0a67 	vmov.f32	s0, s15
 8001022:	2300      	movs	r3, #0
 8001024:	4a69      	ldr	r2, [pc, #420]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001026:	2100      	movs	r1, #0
 8001028:	f000 f91a 	bl	8001260 <_ZN15MotorControllerC1EiP17TIM_HandleTypeDefmS1_P12GPIO_TypeDeftffff>
		MotorController motor2(1, &htim15, TIM_CHANNEL_2, &htim2, GPIOC, GPIO_PIN_13, kp[1], ki[1], 1, -1); // motor2 is right motor
 800102c:	4b63      	ldr	r3, [pc, #396]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800102e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001034:	ed93 7a01 	vldr	s14, [r3, #4]
 8001038:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800104e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001052:	eef0 0a47 	vmov.f32	s1, s14
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	2304      	movs	r3, #4
 800105c:	4a5b      	ldr	r2, [pc, #364]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800105e:	2101      	movs	r1, #1
 8001060:	f000 f8fe 	bl	8001260 <_ZN15MotorControllerC1EiP17TIM_HandleTypeDefmS1_P12GPIO_TypeDeftffff>


		// Give global Vx, Vy, Omega Speed
		motor_goal = diff.Set_GoalCarInfo(car_goal);
 8001064:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001066:	ed93 5b00 	vldr	d5, [r3]
 800106a:	ed93 6b02 	vldr	d6, [r3, #8]
 800106e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001072:	eeb0 0b45 	vmov.f64	d0, d5
 8001076:	eeb0 1b46 	vmov.f64	d1, d6
 800107a:	eeb0 2b47 	vmov.f64	d2, d7
 800107e:	4857      	ldr	r0, [pc, #348]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001080:	f7ff f9b7 	bl	80003f2 <_ZN11DiffChassis15Set_GoalCarInfoE8CAR_INFO>
 8001084:	eeb0 4b40 	vmov.f64	d4, d0
 8001088:	eeb0 5b41 	vmov.f64	d5, d1
 800108c:	eeb0 6b42 	vmov.f64	d6, d2
 8001090:	eeb0 7b43 	vmov.f64	d7, d3
 8001094:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001096:	ed83 4b00 	vstr	d4, [r3]
 800109a:	ed83 5b02 	vstr	d5, [r3, #8]
 800109e:	ed83 6b04 	vstr	d6, [r3, #16]
 80010a2:	ed83 7b06 	vstr	d7, [r3, #24]
		motor1.SetSpeed(motor_goal.V1);
 80010a6:	4b4e      	ldr	r3, [pc, #312]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80010a8:	ed93 7b00 	vldr	d7, [r3]
 80010ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f90f 	bl	80012dc <_ZN15MotorController8SetSpeedEf>
		motor2.SetSpeed(motor_goal.V2);
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80010c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80010c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f903 	bl	80012dc <_ZN15MotorController8SetSpeedEf>

		// update and get now car info
		diff.Update_NowCarInfo(motor1.Update(dt), motor2.Update(dt));
 80010d6:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	eeb0 0a67 	vmov.f32	s0, s15
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f908 	bl	80012fa <_ZN15MotorController6UpdateEf>
 80010ea:	eeb0 8a40 	vmov.f32	s16, s0
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f8fc 	bl	80012fa <_ZN15MotorController6UpdateEf>
 8001102:	eef0 7a40 	vmov.f32	s15, s0
 8001106:	eef0 0a67 	vmov.f32	s1, s15
 800110a:	eeb0 0a48 	vmov.f32	s0, s16
 800110e:	4833      	ldr	r0, [pc, #204]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001110:	f7ff fa0a 	bl	8000528 <_ZN11DiffChassis17Update_NowCarInfoEff>
		info = diff.Get_NowCarInfo();
 8001114:	4831      	ldr	r0, [pc, #196]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001116:	f7ff fb1e 	bl	8000756 <_ZN11DiffChassis14Get_NowCarInfoEv>
 800111a:	eeb0 5b40 	vmov.f64	d5, d0
 800111e:	eeb0 6b41 	vmov.f64	d6, d1
 8001122:	eeb0 7b42 	vmov.f64	d7, d2
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001128:	ed83 5b00 	vstr	d5, [r3]
 800112c:	ed83 6b02 	vstr	d6, [r3, #8]
 8001130:	ed83 7b04 	vstr	d7, [r3, #16]
		measured_speed = diff.Get_NowMotorV();
 8001134:	4829      	ldr	r0, [pc, #164]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001136:	f7ff fae1 	bl	80006fc <_ZN11DiffChassis13Get_NowMotorVEv>
 800113a:	eeb0 4b40 	vmov.f64	d4, d0
 800113e:	eeb0 5b41 	vmov.f64	d5, d1
 8001142:	eeb0 6b42 	vmov.f64	d6, d2
 8001146:	eeb0 7b43 	vmov.f64	d7, d3
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x218>)
 800114c:	ed83 4b00 	vstr	d4, [r3]
 8001150:	ed83 5b02 	vstr	d5, [r3, #8]
 8001154:	ed83 6b04 	vstr	d6, [r3, #16]
 8001158:	ed83 7b06 	vstr	d7, [r3, #24]
//
//
//		measured_speed[1] = motor2.Update(dt);

		// update and get now car location
		diff.Update_NowCarLocation(motor1.MoveDistance(), motor2.MoveDistance());
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9e3 	bl	800152c <_ZN15MotorController12MoveDistanceEv>
 8001166:	eeb0 8a40 	vmov.f32	s16, s0
 800116a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f9dc 	bl	800152c <_ZN15MotorController12MoveDistanceEv>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	eef0 0a67 	vmov.f32	s1, s15
 800117c:	eeb0 0a48 	vmov.f32	s0, s16
 8001180:	4816      	ldr	r0, [pc, #88]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001182:	f7ff fa49 	bl	8000618 <_ZN11DiffChassis21Update_NowCarLocationEff>
		location = diff.Get_NowCarLocation();
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001188:	f7ff fb0a 	bl	80007a0 <_ZN11DiffChassis18Get_NowCarLocationEv>
 800118c:	eeb0 5b40 	vmov.f64	d5, d0
 8001190:	eeb0 6b41 	vmov.f64	d6, d1
 8001194:	eeb0 7b42 	vmov.f64	d7, d2
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800119a:	ed83 5b00 	vstr	d5, [r3]
 800119e:	ed83 6b02 	vstr	d6, [r3, #8]
 80011a2:	ed83 7b04 	vstr	d7, [r3, #16]
	}
//		if (motor1_signal != pre_motor_signal) {
//			pre_motor_signal = motor1_signal;
//		}
//	}
}
 80011a6:	bf00      	nop
 80011a8:	3780      	adds	r7, #128	; 0x80
 80011aa:	46bd      	mov	sp, r7
 80011ac:	ecbd 8b02 	vpop	{d8}
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40001000 	.word	0x40001000
 80011b8:	240002c8 	.word	0x240002c8
 80011bc:	24000014 	.word	0x24000014
 80011c0:	24000024 	.word	0x24000024
 80011c4:	58021000 	.word	0x58021000
 80011c8:	24000150 	.word	0x24000150
 80011cc:	240001e8 	.word	0x240001e8
 80011d0:	58020800 	.word	0x58020800
 80011d4:	2400006c 	.word	0x2400006c
 80011d8:	240002d0 	.word	0x240002d0
 80011dc:	24000238 	.word	0x24000238
 80011e0:	24000318 	.word	0x24000318
 80011e4:	24000010 	.word	0x24000010
 80011e8:	240002e8 	.word	0x240002e8
 80011ec:	24000338 	.word	0x24000338
 80011f0:	24000300 	.word	0x24000300

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d109      	bne.n	8001224 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	4293      	cmp	r3, r2
 8001218:	d104      	bne.n	8001224 <_Z41__static_initialization_and_destruction_0ii+0x24>
DiffChassis diff(0, 1);
 800121a:	2201      	movs	r2, #1
 800121c:	2100      	movs	r1, #0
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001220:	f7ff f8bd 	bl	800039e <_ZN11DiffChassisC1Eii>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	24000238 	.word	0x24000238

08001230 <_GLOBAL__sub_I_htim2>:
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
 8001234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff ffe1 	bl	8001200 <_Z41__static_initialization_and_destruction_0ii>
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	ed87 0a01 	vstr	s0, [r7, #4]
 800124a:	edd7 7a01 	vldr	s15, [r7, #4]
 800124e:	eef0 7ae7 	vabs.f32	s15, s15
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_ZN15MotorControllerC1EiP17TIM_HandleTypeDefmS1_P12GPIO_TypeDeftffff>:

double WheelRadius = 0.05;
double ROUND = 2 * WheelRadius * 3.14159;
double CONST_FOR_MOTOR[4] = {-ROUND / RES_Ratio, ROUND / RES_Ratio, ROUND / RES_Ratio, ROUND / RES_Ratio};

MotorController::MotorController(const int index, TIM_HandleTypeDef* htim_pwm, uint32_t pwm_channel, TIM_HandleTypeDef* htim_encoder, GPIO_TypeDef* dir_port, uint16_t dir_pin, float kp, float ki, float max_output, float min_output)
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	61f8      	str	r0, [r7, #28]
 8001268:	61b9      	str	r1, [r7, #24]
 800126a:	617a      	str	r2, [r7, #20]
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001272:	edc7 0a02 	vstr	s1, [r7, #8]
 8001276:	ed87 1a01 	vstr	s2, [r7, #4]
 800127a:	edc7 1a00 	vstr	s3, [r7]
    : index(index), pi_controller(kp, ki, max_output, min_output, index), htim_pwm(htim_pwm), pwm_channel(pwm_channel), htim_encoder(htim_encoder), dir_port(dir_port), dir_pin(dir_pin), setpoint(0), last_encoder_count(0) {}
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3304      	adds	r3, #4
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	edd7 1a00 	vldr	s3, [r7]
 800128e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001292:	edd7 0a02 	vldr	s1, [r7, #8]
 8001296:	ed97 0a03 	vldr	s0, [r7, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f9ce 	bl	800163c <_ZN12PIControllerC1Effffi>
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	619a      	str	r2, [r3, #24]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	61da      	str	r2, [r3, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b0:	621a      	str	r2, [r3, #32]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80012bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN15MotorController8SetSpeedEf>:

void MotorController::SetSpeed(float speed) {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	ed87 0a00 	vstr	s0, [r7]
    setpoint = speed;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZN15MotorController6UpdateEf>:

float MotorController::Update(float dt) {
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	ed87 0a00 	vstr	s0, [r7]
    Vnow = GetMeasuredSpeed();
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8de 	bl	80014c8 <_ZN15MotorController16GetMeasuredSpeedEv>
 800130c:	eef0 7a40 	vmov.f32	s15, s0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    float control_signal = pi_controller.Compute(index, setpoint, Vnow, dt);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	1d1a      	adds	r2, r3, #4
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6819      	ldr	r1, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800132a:	ed97 1a00 	vldr	s2, [r7]
 800132e:	eef0 0a47 	vmov.f32	s1, s14
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	4610      	mov	r0, r2
 8001338:	f000 f9aa 	bl	8001690 <_ZN12PIController7ComputeEifff>
 800133c:	ed87 0a03 	vstr	s0, [r7, #12]
    SetPWM(control_signal);
 8001340:	ed97 0a03 	vldr	s0, [r7, #12]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f809 	bl	800135c <_ZN15MotorController6SetPWMEf>
    return Vnow;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134e:	ee07 3a90 	vmov	s15, r3
}
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_ZN15MotorController6SetPWMEf>:

void MotorController::SetPWM(float value) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	ed87 0a00 	vstr	s0, [r7]
    if (value >= 0) {
 8001368:	edd7 7a00 	vldr	s15, [r7]
 800136c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	db08      	blt.n	8001388 <_ZN15MotorController6SetPWMEf+0x2c>
        HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	f001 f85b 	bl	800243c <HAL_GPIO_WritePin>
 8001386:	e007      	b.n	8001398 <_ZN15MotorController6SetPWMEf+0x3c>
    } else {
        HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_SET);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	f001 f852 	bl	800243c <HAL_GPIO_WritePin>
    }
	__HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, static_cast<uint32_t>(std::fabs(value* MOTOR_PWM_PULSE)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d114      	bne.n	80013ca <_ZN15MotorController6SetPWMEf+0x6e>
 80013a0:	edd7 7a00 	vldr	s15, [r7]
 80013a4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80014c4 <_ZN15MotorController6SetPWMEf+0x168>
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	f7ff ff46 	bl	8001240 <_ZSt4fabsf>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c2:	ee17 2a90 	vmov	r2, s15
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013c8:	e077      	b.n	80014ba <_ZN15MotorController6SetPWMEf+0x15e>
	__HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, static_cast<uint32_t>(std::fabs(value* MOTOR_PWM_PULSE)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d114      	bne.n	80013fc <_ZN15MotorController6SetPWMEf+0xa0>
 80013d2:	edd7 7a00 	vldr	s15, [r7]
 80013d6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80014c4 <_ZN15MotorController6SetPWMEf+0x168>
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f7ff ff2d 	bl	8001240 <_ZSt4fabsf>
 80013e6:	eef0 7a40 	vmov.f32	s15, s0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	ee17 2a90 	vmov	r2, s15
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013fa:	e05e      	b.n	80014ba <_ZN15MotorController6SetPWMEf+0x15e>
	__HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, static_cast<uint32_t>(std::fabs(value* MOTOR_PWM_PULSE)));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d114      	bne.n	800142e <_ZN15MotorController6SetPWMEf+0xd2>
 8001404:	edd7 7a00 	vldr	s15, [r7]
 8001408:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80014c4 <_ZN15MotorController6SetPWMEf+0x168>
 800140c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	f7ff ff14 	bl	8001240 <_ZSt4fabsf>
 8001418:	eef0 7a40 	vmov.f32	s15, s0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001426:	ee17 2a90 	vmov	r2, s15
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800142c:	e045      	b.n	80014ba <_ZN15MotorController6SetPWMEf+0x15e>
	__HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, static_cast<uint32_t>(std::fabs(value* MOTOR_PWM_PULSE)));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d114      	bne.n	8001460 <_ZN15MotorController6SetPWMEf+0x104>
 8001436:	edd7 7a00 	vldr	s15, [r7]
 800143a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80014c4 <_ZN15MotorController6SetPWMEf+0x168>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	f7ff fefb 	bl	8001240 <_ZSt4fabsf>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001458:	ee17 2a90 	vmov	r2, s15
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800145e:	e02c      	b.n	80014ba <_ZN15MotorController6SetPWMEf+0x15e>
	__HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, static_cast<uint32_t>(std::fabs(value* MOTOR_PWM_PULSE)));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b10      	cmp	r3, #16
 8001466:	d114      	bne.n	8001492 <_ZN15MotorController6SetPWMEf+0x136>
 8001468:	edd7 7a00 	vldr	s15, [r7]
 800146c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80014c4 <_ZN15MotorController6SetPWMEf+0x168>
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	f7ff fee2 	bl	8001240 <_ZSt4fabsf>
 800147c:	eef0 7a40 	vmov.f32	s15, s0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148a:	ee17 2a90 	vmov	r2, s15
 800148e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001490:	e013      	b.n	80014ba <_ZN15MotorController6SetPWMEf+0x15e>
	__HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, static_cast<uint32_t>(std::fabs(value* MOTOR_PWM_PULSE)));
 8001492:	edd7 7a00 	vldr	s15, [r7]
 8001496:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80014c4 <_ZN15MotorController6SetPWMEf+0x168>
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f7ff fecd 	bl	8001240 <_ZSt4fabsf>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b4:	ee17 2a90 	vmov	r2, s15
 80014b8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	45c80000 	.word	0x45c80000

080014c8 <_ZN15MotorController16GetMeasuredSpeedEv>:

float MotorController::GetMeasuredSpeed() {
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    int32_t encoder_count = __HAL_TIM_GET_COUNTER(htim_encoder);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	60fb      	str	r3, [r7, #12]
    continue_CNT += encoder_count;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	441a      	add	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COUNTER(htim_encoder, 0); // 复位计数器
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
    float speed = encoder_count * CONST_FOR_MOTOR[index]; // 根据实际情况调整常数
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <_ZN15MotorController16GetMeasuredSpeedEv+0x60>)
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	ed93 7b00 	vldr	d7, [r3]
 8001508:	ee26 7b07 	vmul.f64	d7, d6, d7
 800150c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001510:	edc7 7a02 	vstr	s15, [r7, #8]
    return speed;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	ee07 3a90 	vmov	s15, r3
}
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	24000360 	.word	0x24000360

0800152c <_ZN15MotorController12MoveDistanceEv>:

float MotorController::GetVnow() {
	return Vnow;
}
float MotorController::MoveDistance() {
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	float distance = continue_CNT * CONST_FOR_MOTOR[index];
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <_ZN15MotorController12MoveDistanceEv+0x48>)
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	ed93 7b00 	vldr	d7, [r3]
 800154e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001552:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001556:	edc7 7a03 	vstr	s15, [r7, #12]
	continue_CNT = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

	return distance;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	ee07 3a90 	vmov	s15, r3
}
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	24000360 	.word	0x24000360

08001578 <_Z41__static_initialization_and_destruction_0ii>:
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d13a      	bne.n	80015fe <_Z41__static_initialization_and_destruction_0ii+0x86>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	4293      	cmp	r3, r2
 8001590:	d135      	bne.n	80015fe <_Z41__static_initialization_and_destruction_0ii+0x86>
double ROUND = 2 * WheelRadius * 3.14159;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001594:	ed93 7b00 	vldr	d7, [r3]
 8001598:	ee37 7b07 	vadd.f64	d7, d7, d7
 800159c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001610 <_Z41__static_initialization_and_destruction_0ii+0x98>
 80015a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015a6:	ed83 7b00 	vstr	d7, [r3]
double CONST_FOR_MOTOR[4] = {-ROUND / RES_Ratio, ROUND / RES_Ratio, ROUND / RES_Ratio, ROUND / RES_Ratio};
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015ac:	ed93 7b00 	vldr	d7, [r3]
 80015b0:	eeb1 6b47 	vneg.f64	d6, d7
 80015b4:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001618 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015be:	ed83 7b00 	vstr	d7, [r3]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015c4:	ed93 6b00 	vldr	d6, [r3]
 80015c8:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8001618 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015d2:	ed83 7b02 	vstr	d7, [r3, #8]
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015d8:	ed93 6b00 	vldr	d6, [r3]
 80015dc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001618 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015e6:	ed83 7b04 	vstr	d7, [r3, #16]
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80015ec:	ed93 6b00 	vldr	d6, [r3]
 80015f0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001618 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80015f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80015fa:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	f01b866e 	.word	0xf01b866e
 8001614:	400921f9 	.word	0x400921f9
 8001618:	76c8b439 	.word	0x76c8b439
 800161c:	405a9fbe 	.word	0x405a9fbe
 8001620:	24000038 	.word	0x24000038
 8001624:	24000358 	.word	0x24000358
 8001628:	24000360 	.word	0x24000360

0800162c <_GLOBAL__sub_I_WheelRadius>:
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
 8001630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff ff9f 	bl	8001578 <_Z41__static_initialization_and_destruction_0ii>
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN12PIControllerC1Effffi>:
#include "pi_controller.h"

float i[4] = {0, 0, 0, 0};

PIController::PIController(float kp, float ki, float max_output, float min_output, const int index)
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6178      	str	r0, [r7, #20]
 8001644:	ed87 0a04 	vstr	s0, [r7, #16]
 8001648:	edc7 0a03 	vstr	s1, [r7, #12]
 800164c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001650:	edc7 1a01 	vstr	s3, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    : kp(kp), ki(ki), max_output(max_output), min_output(min_output), integral(i[index]) {}
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <_ZN12PIControllerC1Effffi+0x50>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	24000380 	.word	0x24000380

08001690 <_ZN12PIController7ComputeEifff>:

float PIController::Compute(const int index, float setpoint, float measured_value, float dt) {
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6178      	str	r0, [r7, #20]
 8001698:	6139      	str	r1, [r7, #16]
 800169a:	ed87 0a03 	vstr	s0, [r7, #12]
 800169e:	edc7 0a02 	vstr	s1, [r7, #8]
 80016a2:	ed87 1a01 	vstr	s2, [r7, #4]
    float error = setpoint - measured_value;
 80016a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b2:	edc7 7a06 	vstr	s15, [r7, #24]
    integral += error * dt;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80016bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80016c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	edc3 7a04 	vstr	s15, [r3, #16]
    if (setpoint == 0) integral = 0;
 80016d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	d104      	bne.n	80016ea <_ZN12PIController7ComputeEifff+0x5a>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	e03a      	b.n	8001760 <_ZN12PIController7ComputeEifff+0xd0>
    else if (ki * integral > 1) integral = 0.99/ki;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80016f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dd0e      	ble.n	8001726 <_ZN12PIController7ComputeEifff+0x96>
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	edd3 7a01 	vldr	s15, [r3, #4]
 800170e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001712:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80017e0 <_ZN12PIController7ComputeEifff+0x150>
 8001716:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800171a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	edc3 7a04 	vstr	s15, [r3, #16]
 8001724:	e01c      	b.n	8001760 <_ZN12PIController7ComputeEifff+0xd0>
    else if (ki * integral < -1) integral = -0.99/ki;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	ed93 7a01 	vldr	s14, [r3, #4]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d50d      	bpl.n	8001760 <_ZN12PIController7ComputeEifff+0xd0>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	edd3 7a01 	vldr	s15, [r3, #4]
 800174a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800174e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80017e8 <_ZN12PIController7ComputeEifff+0x158>
 8001752:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001756:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	edc3 7a04 	vstr	s15, [r3, #16]
    i[index] = integral;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	4922      	ldr	r1, [pc, #136]	; (80017f0 <_ZN12PIController7ComputeEifff+0x160>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	601a      	str	r2, [r3, #0]

    float output = kp * error + ki * integral;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	ed93 7a00 	vldr	s14, [r3]
 8001774:	edd7 7a06 	vldr	s15, [r7, #24]
 8001778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	edd3 7a04 	vldr	s15, [r3, #16]
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001790:	edc7 7a07 	vstr	s15, [r7, #28]
    if (output > max_output) output = max_output;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	edd3 7a02 	vldr	s15, [r3, #8]
 800179a:	ed97 7a07 	vldr	s14, [r7, #28]
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	dd02      	ble.n	80017ae <_ZN12PIController7ComputeEifff+0x11e>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	61fb      	str	r3, [r7, #28]
    if (output < min_output) output = min_output;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80017b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80017b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d502      	bpl.n	80017c8 <_ZN12PIController7ComputeEifff+0x138>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	61fb      	str	r3, [r7, #28]
    return output;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	ee07 3a90 	vmov	s15, r3
}
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	3724      	adds	r7, #36	; 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	f3af 8000 	nop.w
 80017e0:	7ae147ae 	.word	0x7ae147ae
 80017e4:	3fefae14 	.word	0x3fefae14
 80017e8:	7ae147ae 	.word	0x7ae147ae
 80017ec:	bfefae14 	.word	0xbfefae14
 80017f0:	24000380 	.word	0x24000380

080017f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_MspInit+0x30>)
 80017fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_MspInit+0x30>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_MspInit+0x30>)
 800180c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	58024400 	.word	0x58024400

08001828 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b090      	sub	sp, #64	; 0x40
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d156      	bne.n	80018f8 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b87      	ldr	r3, [pc, #540]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800184c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001850:	4a85      	ldr	r2, [pc, #532]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185a:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800185c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
 8001866:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	4a7e      	ldr	r2, [pc, #504]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001878:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188c:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001896:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b6:	2301      	movs	r3, #1
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	486a      	ldr	r0, [pc, #424]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x244>)
 80018c2:	f000 fc13 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018c6:	2308      	movs	r3, #8
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d6:	2301      	movs	r3, #1
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	4863      	ldr	r0, [pc, #396]	; (8001a70 <HAL_TIM_Encoder_MspInit+0x248>)
 80018e2:	f000 fc03 	bl	80020ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201c      	movs	r0, #28
 80018ec:	f000 fbc9 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f0:	201c      	movs	r0, #28
 80018f2:	f000 fbe0 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018f6:	e0b3      	b.n	8001a60 <HAL_TIM_Encoder_MspInit+0x238>
  else if(htim_encoder->Instance==TIM3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x24c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d136      	bne.n	8001970 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001908:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001912:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800193e:	2330      	movs	r3, #48	; 0x30
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800194e:	2302      	movs	r3, #2
 8001950:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	4845      	ldr	r0, [pc, #276]	; (8001a70 <HAL_TIM_Encoder_MspInit+0x248>)
 800195a:	f000 fbc7 	bl	80020ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	201d      	movs	r0, #29
 8001964:	f000 fb8d 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001968:	201d      	movs	r0, #29
 800196a:	f000 fba4 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 800196e:	e077      	b.n	8001a60 <HAL_TIM_Encoder_MspInit+0x238>
  else if(htim_encoder->Instance==TIM4)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <HAL_TIM_Encoder_MspInit+0x250>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d137      	bne.n	80019ea <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001980:	4a39      	ldr	r2, [pc, #228]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800198c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019c8:	2302      	movs	r3, #2
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	482a      	ldr	r0, [pc, #168]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x254>)
 80019d4:	f000 fb8a 	bl	80020ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	201e      	movs	r0, #30
 80019de:	f000 fb50 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019e2:	201e      	movs	r0, #30
 80019e4:	f000 fb67 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 80019e8:	e03a      	b.n	8001a60 <HAL_TIM_Encoder_MspInit+0x238>
  else if(htim_encoder->Instance==TIM5)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <HAL_TIM_Encoder_MspInit+0x258>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d135      	bne.n	8001a60 <HAL_TIM_Encoder_MspInit+0x238>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 80019f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x240>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a30:	2303      	movs	r3, #3
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a40:	2302      	movs	r3, #2
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4808      	ldr	r0, [pc, #32]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x244>)
 8001a4c:	f000 fb4e 	bl	80020ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2032      	movs	r0, #50	; 0x32
 8001a56:	f000 fb14 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a5a:	2032      	movs	r0, #50	; 0x32
 8001a5c:	f000 fb2b 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 8001a60:	bf00      	nop
 8001a62:	3740      	adds	r7, #64	; 0x40
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	58020000 	.word	0x58020000
 8001a70:	58020400 	.word	0x58020400
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40000800 	.word	0x40000800
 8001a7c:	58020c00 	.word	0x58020c00
 8001a80:	40000c00 	.word	0x40000c00

08001a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_TIM_Base_MspInit+0x48>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d116      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8001aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2036      	movs	r0, #54	; 0x36
 8001aba:	f000 fae2 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001abe:	2036      	movs	r0, #54	; 0x36
 8001ac0:	f000 faf9 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40001000 	.word	0x40001000
 8001ad0:	58024400 	.word	0x58024400

08001ad4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_TIM_PWM_MspInit+0x48>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d116      	bne.n	8001b14 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_TIM_PWM_MspInit+0x4c>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_TIM_PWM_MspInit+0x4c>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_TIM_PWM_MspInit+0x4c>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2074      	movs	r0, #116	; 0x74
 8001b0a:	f000 faba 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001b0e:	2074      	movs	r0, #116	; 0x74
 8001b10:	f000 fad1 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	58024400 	.word	0x58024400

08001b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_TIM_MspPostInit+0x68>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11e      	bne.n	8001b84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_TIM_MspPostInit+0x6c>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    PE6     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001b74:	2304      	movs	r3, #4
 8001b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_TIM_MspPostInit+0x70>)
 8001b80:	f000 fab4 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40014000 	.word	0x40014000
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58021000 	.word	0x58021000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 f952 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM2_IRQHandler+0x10>)
 8001bf2:	f001 fedb 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2400006c 	.word	0x2400006c

08001c00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM3_IRQHandler+0x10>)
 8001c06:	f001 fed1 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	240000b8 	.word	0x240000b8

08001c14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM4_IRQHandler+0x10>)
 8001c1a:	f001 fec7 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	24000104 	.word	0x24000104

08001c28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM5_IRQHandler+0x10>)
 8001c2e:	f001 febd 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	24000150 	.word	0x24000150

08001c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM6_DAC_IRQHandler+0x10>)
 8001c42:	f001 feb3 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2400019c 	.word	0x2400019c

08001c50 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM15_IRQHandler+0x10>)
 8001c56:	f001 fea9 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	240001e8 	.word	0x240001e8

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c68:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <SystemInit+0xd0>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <SystemInit+0xd0>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <SystemInit+0xd4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d807      	bhi.n	8001c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <SystemInit+0xd4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 030f 	bic.w	r3, r3, #15
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <SystemInit+0xd4>)
 8001c8e:	f043 0307 	orr.w	r3, r3, #7
 8001c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <SystemInit+0xd8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <SystemInit+0xd8>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <SystemInit+0xd8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <SystemInit+0xd8>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4924      	ldr	r1, [pc, #144]	; (8001d3c <SystemInit+0xd8>)
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <SystemInit+0xdc>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <SystemInit+0xd4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <SystemInit+0xd4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 030f 	bic.w	r3, r3, #15
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <SystemInit+0xd4>)
 8001cc8:	f043 0307 	orr.w	r3, r3, #7
 8001ccc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <SystemInit+0xd8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <SystemInit+0xd8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <SystemInit+0xd8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <SystemInit+0xd8>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <SystemInit+0xe0>)
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <SystemInit+0xd8>)
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <SystemInit+0xe4>)
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <SystemInit+0xd8>)
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <SystemInit+0xe8>)
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <SystemInit+0xd8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <SystemInit+0xd8>)
 8001cfa:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <SystemInit+0xe8>)
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <SystemInit+0xd8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <SystemInit+0xd8>)
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <SystemInit+0xe8>)
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <SystemInit+0xd8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <SystemInit+0xd8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <SystemInit+0xd8>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <SystemInit+0xd8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <SystemInit+0xec>)
 8001d24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	52002000 	.word	0x52002000
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d44:	02020200 	.word	0x02020200
 8001d48:	01ff0000 	.word	0x01ff0000
 8001d4c:	01010280 	.word	0x01010280
 8001d50:	52004000 	.word	0x52004000

08001d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d58:	f7ff ff84 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d5e:	490d      	ldr	r1, [pc, #52]	; (8001d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d74:	4c0a      	ldr	r4, [pc, #40]	; (8001da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f002 fd6b 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d86:	f7fe fd33 	bl	80007f0 <main>
  bx  lr
 8001d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d94:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8001d98:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 8001d9c:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 8001da0:	24000394 	.word	0x24000394

08001da4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC3_IRQHandler>
	...

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dae:	2003      	movs	r0, #3
 8001db0:	f000 f95c 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001db4:	f001 f8fa 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_Init+0x68>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	4913      	ldr	r1, [pc, #76]	; (8001e14 <HAL_Init+0x6c>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_Init+0x68>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_Init+0x6c>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_Init+0x70>)
 8001dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_Init+0x74>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f814 	bl	8001e20 <HAL_InitTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e002      	b.n	8001e08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e02:	f7ff fcf7 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	58024400 	.word	0x58024400
 8001e14:	080048cc 	.word	0x080048cc
 8001e18:	24000044 	.word	0x24000044
 8001e1c:	24000040 	.word	0x24000040

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_InitTick+0x60>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e021      	b.n	8001e78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_InitTick+0x64>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_InitTick+0x60>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f941 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 f90b 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x68>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2400004c 	.word	0x2400004c
 8001e84:	24000040 	.word	0x24000040
 8001e88:	24000048 	.word	0x24000048

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2400004c 	.word	0x2400004c
 8001eb0:	24000390 	.word	0x24000390

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	24000390 	.word	0x24000390

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <__NVIC_SetPriorityGrouping+0x40>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x40>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	05fa0000 	.word	0x05fa0000

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff40 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff33 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa4 	bl	8002028 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020fa:	4b86      	ldr	r3, [pc, #536]	; (8002314 <HAL_GPIO_Init+0x228>)
 80020fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020fe:	e18c      	b.n	800241a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 817e 	beq.w	8002414 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_GPIO_Init+0x44>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0201 	and.w	r2, r3, #1
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d017      	beq.n	80021ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d123      	bne.n	8002222 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80d8 	beq.w	8002414 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_GPIO_Init+0x22c>)
 8002266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800226a:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_GPIO_Init+0x22c>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_GPIO_Init+0x22c>)
 8002276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_GPIO_Init+0x230>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_GPIO_Init+0x234>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_GPIO_Init+0x258>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_GPIO_Init+0x238>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02b      	beq.n	800230e <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_GPIO_Init+0x23c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_GPIO_Init+0x240>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x21a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_GPIO_Init+0x244>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x216>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_GPIO_Init+0x248>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_GPIO_Init+0x24c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a16      	ldr	r2, [pc, #88]	; (800233c <HAL_GPIO_Init+0x250>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x20a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_GPIO_Init+0x254>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x206>
 80022ee:	2309      	movs	r3, #9
 80022f0:	e029      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 80022f2:	230a      	movs	r3, #10
 80022f4:	e027      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e025      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 80022fa:	2306      	movs	r3, #6
 80022fc:	e023      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 80022fe:	2305      	movs	r3, #5
 8002300:	e021      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 8002302:	2304      	movs	r3, #4
 8002304:	e01f      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 8002306:	2303      	movs	r3, #3
 8002308:	e01d      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 800230a:	2302      	movs	r3, #2
 800230c:	e01b      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 800230e:	2301      	movs	r3, #1
 8002310:	e019      	b.n	8002346 <HAL_GPIO_Init+0x25a>
 8002312:	bf00      	nop
 8002314:	58000080 	.word	0x58000080
 8002318:	58024400 	.word	0x58024400
 800231c:	58000400 	.word	0x58000400
 8002320:	58020000 	.word	0x58020000
 8002324:	58020400 	.word	0x58020400
 8002328:	58020800 	.word	0x58020800
 800232c:	58020c00 	.word	0x58020c00
 8002330:	58021000 	.word	0x58021000
 8002334:	58021400 	.word	0x58021400
 8002338:	58021800 	.word	0x58021800
 800233c:	58021c00 	.word	0x58021c00
 8002340:	58022400 	.word	0x58022400
 8002344:	2300      	movs	r3, #0
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002356:	4938      	ldr	r1, [pc, #224]	; (8002438 <HAL_GPIO_Init+0x34c>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800238a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	f47f ae6b 	bne.w	8002100 <HAL_GPIO_Init+0x14>
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3724      	adds	r7, #36	; 0x24
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	58000400 	.word	0x58000400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b04      	cmp	r3, #4
 8002482:	d00a      	beq.n	800249a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e01f      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e01d      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	490f      	ldr	r1, [pc, #60]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024aa:	f7ff fd03 	bl	8001eb4 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b0:	e009      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b2:	f7ff fcff 	bl	8001eb4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c0:	d901      	bls.n	80024c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e007      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_PWREx_ConfigSupply+0x70>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d1ee      	bne.n	80024b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	58024800 	.word	0x58024800

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e39d      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8087 	beq.w	8002612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002504:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800250e:	4b86      	ldr	r3, [pc, #536]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b10      	cmp	r3, #16
 8002518:	d007      	beq.n	800252a <HAL_RCC_OscConfig+0x46>
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	2b18      	cmp	r3, #24
 800251e:	d110      	bne.n	8002542 <HAL_RCC_OscConfig+0x5e>
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d10b      	bne.n	8002542 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d06c      	beq.n	8002610 <HAL_RCC_OscConfig+0x12c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d168      	bne.n	8002610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e377      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x76>
 800254c:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e02e      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x98>
 8002562:	4b71      	ldr	r3, [pc, #452]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a70      	ldr	r2, [pc, #448]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6e      	ldr	r3, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6d      	ldr	r2, [pc, #436]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0xbc>
 8002586:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a67      	ldr	r2, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a64      	ldr	r2, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 80025a0:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a60      	ldr	r2, [pc, #384]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff fc78 	bl	8001eb4 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff fc74 	bl	8001eb4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e32b      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xe4>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7ff fc64 	bl	8001eb4 <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff fc60 	bl	8001eb4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e317      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x10c>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 808c 	beq.w	8002738 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002628:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800262a:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_RCC_OscConfig+0x162>
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2b18      	cmp	r3, #24
 800263a:	d137      	bne.n	80026ac <HAL_RCC_OscConfig+0x1c8>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d132      	bne.n	80026ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x17a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e2e9      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800265e:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0219 	bic.w	r2, r3, #25
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	492f      	ldr	r1, [pc, #188]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002670:	f7ff fc20 	bl	8001eb4 <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002678:	f7ff fc1c 	bl	8001eb4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e2d3      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	4920      	ldr	r1, [pc, #128]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026aa:	e045      	b.n	8002738 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d026      	beq.n	8002702 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0219 	bic.w	r2, r3, #25
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4919      	ldr	r1, [pc, #100]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff fbf5 	bl	8001eb4 <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff fbf1 	bl	8001eb4 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2a8      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	490b      	ldr	r1, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	e01a      	b.n	8002738 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_RCC_OscConfig+0x244>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7ff fbd1 	bl	8001eb4 <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002716:	f7ff fbcd 	bl	8001eb4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d903      	bls.n	800272c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e284      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
 8002728:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800272c:	4b96      	ldr	r3, [pc, #600]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	d06a      	beq.n	800281a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002744:	4b90      	ldr	r3, [pc, #576]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800274e:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b08      	cmp	r3, #8
 8002758:	d007      	beq.n	800276a <HAL_RCC_OscConfig+0x286>
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b18      	cmp	r3, #24
 800275e:	d11b      	bne.n	8002798 <HAL_RCC_OscConfig+0x2b4>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800276a:	4b87      	ldr	r3, [pc, #540]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x29e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2b80      	cmp	r3, #128	; 0x80
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e257      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002782:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	061b      	lsls	r3, r3, #24
 8002790:	497d      	ldr	r1, [pc, #500]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002796:	e040      	b.n	800281a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027a0:	4b79      	ldr	r3, [pc, #484]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a78      	ldr	r2, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7ff fb82 	bl	8001eb4 <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027b4:	f7ff fb7e 	bl	8001eb4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e235      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027c6:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d2:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	061b      	lsls	r3, r3, #24
 80027e0:	4969      	ldr	r1, [pc, #420]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60cb      	str	r3, [r1, #12]
 80027e6:	e018      	b.n	800281a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027e8:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a66      	ldr	r2, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80027ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff fb5e 	bl	8001eb4 <HAL_GetTick>
 80027f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027fc:	f7ff fb5a 	bl	8001eb4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e211      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800280e:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7ff fb3b 	bl	8001eb4 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002842:	f7ff fb37 	bl	8001eb4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1ee      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x35e>
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	4a48      	ldr	r2, [pc, #288]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff fb21 	bl	8001eb4 <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff fb1d 	bl	8001eb4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1d4      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d036      	beq.n	800290e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d019      	beq.n	80028dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028a8:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80028ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b4:	f7ff fafe 	bl	8001eb4 <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028bc:	f7ff fafa 	bl	8001eb4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1b1      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x3d8>
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028dc:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 80028e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028e8:	f7ff fae4 	bl	8001eb4 <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028f0:	f7ff fae0 	bl	8001eb4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e197      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8086 	beq.w	8002a28 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x4a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_RCC_OscConfig+0x4a8>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002928:	f7ff fac4 	bl	8001eb4 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7ff fac0 	bl	8001eb4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e177      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_OscConfig+0x4a8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d106      	bne.n	8002964 <HAL_RCC_OscConfig+0x480>
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	e032      	b.n	80029ca <HAL_RCC_OscConfig+0x4e6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_RCC_OscConfig+0x4ac>
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a05      	ldr	r2, [pc, #20]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a02      	ldr	r2, [pc, #8]	; (8002988 <HAL_RCC_OscConfig+0x4a4>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6713      	str	r3, [r2, #112]	; 0x70
 8002984:	e021      	b.n	80029ca <HAL_RCC_OscConfig+0x4e6>
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
 800298c:	58024800 	.word	0x58024800
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4ce>
 8002998:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a82      	ldr	r2, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b80      	ldr	r3, [pc, #512]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a7f      	ldr	r2, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x4e6>
 80029b2:	4b7d      	ldr	r3, [pc, #500]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a7c      	ldr	r2, [pc, #496]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a79      	ldr	r2, [pc, #484]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7ff fa6f 	bl	8001eb4 <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff fa6b 	bl	8001eb4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e120      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f0:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x4f6>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7ff fa59 	bl	8001eb4 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff fa55 	bl	8001eb4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e10a      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80ff 	beq.w	8002c30 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a32:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	f000 80ba 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	f040 8095 	bne.w	8002b74 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a56      	ldr	r2, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7ff fa2d 	bl	8001eb4 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7ff fa29 	bl	8001eb4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0e0      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a80:	4b4a      	ldr	r3, [pc, #296]	; (8002bac <HAL_RCC_OscConfig+0x6c8>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	4945      	ldr	r1, [pc, #276]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	628b      	str	r3, [r1, #40]	; 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	025b      	lsls	r3, r3, #9
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ac6:	4938      	ldr	r1, [pc, #224]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002acc:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	4a35      	ldr	r2, [pc, #212]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ad8:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x6cc>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	4930      	ldr	r1, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f023 020c 	bic.w	r2, r3, #12
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	492b      	ldr	r1, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f023 0202 	bic.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4927      	ldr	r1, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7ff f9b2 	bl	8001eb4 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b54:	f7ff f9ae 	bl	8001eb4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e065      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x670>
 8002b72:	e05d      	b.n	8002c30 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff f998 	bl	8001eb4 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7ff f994 	bl	8001eb4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04b      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9a:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_OscConfig+0x6c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x6a4>
 8002ba6:	e043      	b.n	8002c30 <HAL_RCC_OscConfig+0x74c>
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	fffffc0c 	.word	0xfffffc0c
 8002bb0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCC_OscConfig+0x758>)
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_OscConfig+0x758>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d031      	beq.n	8002c2c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d12a      	bne.n	8002c2c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d122      	bne.n	8002c2c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d11a      	bne.n	8002c2c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0a5b      	lsrs	r3, r3, #9
 8002bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d111      	bne.n	8002c2c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d108      	bne.n	8002c2c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0e1b      	lsrs	r3, r3, #24
 8002c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3730      	adds	r7, #48	; 0x30
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	58024400 	.word	0x58024400

08002c40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e19c      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b8a      	ldr	r3, [pc, #552]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d910      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 020f 	bic.w	r2, r3, #15
 8002c6a:	4985      	ldr	r1, [pc, #532]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b83      	ldr	r3, [pc, #524]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e184      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d908      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ca0:	4b78      	ldr	r3, [pc, #480]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4975      	ldr	r1, [pc, #468]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d010      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d908      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cce:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	496a      	ldr	r1, [pc, #424]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d908      	bls.n	8002d0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	495e      	ldr	r1, [pc, #376]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d2a:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4953      	ldr	r1, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d908      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f023 020f 	bic.w	r2, r3, #15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4947      	ldr	r1, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d055      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d76:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4940      	ldr	r1, [pc, #256]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d90:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d121      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0f6      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d115      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0ea      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0de      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0d6      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f023 0207 	bic.w	r2, r3, #7
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4925      	ldr	r1, [pc, #148]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7ff f85f 	bl	8001eb4 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfa:	f7ff f85b 	bl	8001eb4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0be      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d1eb      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d208      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f023 020f 	bic.w	r2, r3, #15
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d214      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_ClockConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e086      	b.n	8002f8e <HAL_RCC_ClockConfig+0x34e>
 8002e80:	52002000 	.word	0x52002000
 8002e84:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d208      	bcs.n	8002eb6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea4:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4939      	ldr	r1, [pc, #228]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	4b34      	ldr	r3, [pc, #208]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d208      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	492e      	ldr	r1, [pc, #184]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d208      	bcs.n	8002f12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4922      	ldr	r1, [pc, #136]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d208      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4917      	ldr	r1, [pc, #92]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f40:	f000 f834 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	4912      	ldr	r1, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x35c>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <HAL_RCC_ClockConfig+0x358>)
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <HAL_RCC_ClockConfig+0x35c>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x360>)
 8002f76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x364>)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x368>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe ff4c 	bl	8001e20 <HAL_InitTick>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	080048cc 	.word	0x080048cc
 8002fa0:	24000044 	.word	0x24000044
 8002fa4:	24000040 	.word	0x24000040
 8002fa8:	24000048 	.word	0x24000048

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb2:	4bb3      	ldr	r3, [pc, #716]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fba:	2b18      	cmp	r3, #24
 8002fbc:	f200 8155 	bhi.w	800326a <HAL_RCC_GetSysClockFreq+0x2be>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	0800302d 	.word	0x0800302d
 8002fcc:	0800326b 	.word	0x0800326b
 8002fd0:	0800326b 	.word	0x0800326b
 8002fd4:	0800326b 	.word	0x0800326b
 8002fd8:	0800326b 	.word	0x0800326b
 8002fdc:	0800326b 	.word	0x0800326b
 8002fe0:	0800326b 	.word	0x0800326b
 8002fe4:	0800326b 	.word	0x0800326b
 8002fe8:	08003053 	.word	0x08003053
 8002fec:	0800326b 	.word	0x0800326b
 8002ff0:	0800326b 	.word	0x0800326b
 8002ff4:	0800326b 	.word	0x0800326b
 8002ff8:	0800326b 	.word	0x0800326b
 8002ffc:	0800326b 	.word	0x0800326b
 8003000:	0800326b 	.word	0x0800326b
 8003004:	0800326b 	.word	0x0800326b
 8003008:	08003059 	.word	0x08003059
 800300c:	0800326b 	.word	0x0800326b
 8003010:	0800326b 	.word	0x0800326b
 8003014:	0800326b 	.word	0x0800326b
 8003018:	0800326b 	.word	0x0800326b
 800301c:	0800326b 	.word	0x0800326b
 8003020:	0800326b 	.word	0x0800326b
 8003024:	0800326b 	.word	0x0800326b
 8003028:	0800305f 	.word	0x0800305f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800302c:	4b94      	ldr	r3, [pc, #592]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003038:	4b91      	ldr	r3, [pc, #580]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	4a90      	ldr	r2, [pc, #576]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800304a:	e111      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800304c:	4b8d      	ldr	r3, [pc, #564]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800304e:	61bb      	str	r3, [r7, #24]
    break;
 8003050:	e10e      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003052:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003054:	61bb      	str	r3, [r7, #24]
    break;
 8003056:	e10b      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003058:	4b8c      	ldr	r3, [pc, #560]	; (800328c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800305a:	61bb      	str	r3, [r7, #24]
    break;
 800305c:	e108      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003068:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003072:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003074:	4b82      	ldr	r3, [pc, #520]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800307e:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003096:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80e1 	beq.w	8003264 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f000 8083 	beq.w	80031b0 <HAL_RCC_GetSysClockFreq+0x204>
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	f200 80a1 	bhi.w	80031f4 <HAL_RCC_GetSysClockFreq+0x248>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x114>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d056      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x1c0>
 80030be:	e099      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02d      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030cc:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	ee07 3a90 	vmov	s15, r3
 80030e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f6:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003106:	ed97 6a02 	vldr	s12, [r7, #8]
 800310a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2e4>
 800310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003126:	e087      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a02 	vldr	s12, [r7, #8]
 800314e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800316a:	e065      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003298 <HAL_RCC_GetSysClockFreq+0x2ec>
 800317a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317e:	4b40      	ldr	r3, [pc, #256]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003192:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ae:	e043      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	eddf 6a38 	vldr	s13, [pc, #224]	; 800329c <HAL_RCC_GetSysClockFreq+0x2f0>
 80031be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c2:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031f2:	e021      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003298 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003216:	ed97 6a02 	vldr	s12, [r7, #8]
 800321a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003290 <HAL_RCC_GetSysClockFreq+0x2e4>
 800321e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800322a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003236:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	0a5b      	lsrs	r3, r3, #9
 800323e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003242:	3301      	adds	r3, #1
 8003244:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003250:	edd7 6a07 	vldr	s13, [r7, #28]
 8003254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325c:	ee17 3a90 	vmov	r3, s15
 8003260:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003262:	e005      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
    break;
 8003268:	e002      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800326c:	61bb      	str	r3, [r7, #24]
    break;
 800326e:	bf00      	nop
  }

  return sysclockfreq;
 8003270:	69bb      	ldr	r3, [r7, #24]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
 8003284:	03d09000 	.word	0x03d09000
 8003288:	003d0900 	.word	0x003d0900
 800328c:	017d7840 	.word	0x017d7840
 8003290:	46000000 	.word	0x46000000
 8003294:	4c742400 	.word	0x4c742400
 8003298:	4a742400 	.word	0x4a742400
 800329c:	4bbebc20 	.word	0x4bbebc20

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e049      	b.n	8003346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fbdc 	bl	8001a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 fdc0 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d001      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e05e      	b.n	8003426 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_TIM_Base_Start_IT+0xe4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02c      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d027      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <HAL_TIM_Base_Start_IT+0xe8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d022      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a26      	ldr	r2, [pc, #152]	; (800343c <HAL_TIM_Base_Start_IT+0xec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01d      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <HAL_TIM_Base_Start_IT+0xf0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d018      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a23      	ldr	r2, [pc, #140]	; (8003444 <HAL_TIM_Base_Start_IT+0xf4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_TIM_Base_Start_IT+0xf8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a20      	ldr	r2, [pc, #128]	; (800344c <HAL_TIM_Base_Start_IT+0xfc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d009      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_TIM_Base_Start_IT+0x100>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x94>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_TIM_Base_Start_IT+0x104>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d115      	bne.n	8003410 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_TIM_Base_Start_IT+0x108>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d015      	beq.n	8003422 <HAL_TIM_Base_Start_IT+0xd2>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d011      	beq.n	8003422 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340e:	e008      	b.n	8003422 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e000      	b.n	8003424 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40010000 	.word	0x40010000
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40010400 	.word	0x40010400
 8003448:	40001800 	.word	0x40001800
 800344c:	40014000 	.word	0x40014000
 8003450:	4000e000 	.word	0x4000e000
 8003454:	4000e400 	.word	0x4000e400
 8003458:	00010007 	.word	0x00010007

0800345c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e049      	b.n	8003502 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fe fb26 	bl	8001ad4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 fce2 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_TIM_PWM_Start+0x24>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e03c      	b.n	80035aa <HAL_TIM_PWM_Start+0x9e>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d109      	bne.n	800354a <HAL_TIM_PWM_Start+0x3e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e02f      	b.n	80035aa <HAL_TIM_PWM_Start+0x9e>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d109      	bne.n	8003564 <HAL_TIM_PWM_Start+0x58>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e022      	b.n	80035aa <HAL_TIM_PWM_Start+0x9e>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d109      	bne.n	800357e <HAL_TIM_PWM_Start+0x72>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e015      	b.n	80035aa <HAL_TIM_PWM_Start+0x9e>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b10      	cmp	r3, #16
 8003582:	d109      	bne.n	8003598 <HAL_TIM_PWM_Start+0x8c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e008      	b.n	80035aa <HAL_TIM_PWM_Start+0x9e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0ab      	b.n	800370a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xb6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	e023      	b.n	800360a <HAL_TIM_PWM_Start+0xfe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xc6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d0:	e01b      	b.n	800360a <HAL_TIM_PWM_Start+0xfe>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0xd6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	e013      	b.n	800360a <HAL_TIM_PWM_Start+0xfe>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0xe6>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f0:	e00b      	b.n	800360a <HAL_TIM_PWM_Start+0xfe>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0xf6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	e003      	b.n	800360a <HAL_TIM_PWM_Start+0xfe>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 ffa2 	bl	800455c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <HAL_TIM_PWM_Start+0x208>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_TIM_PWM_Start+0x13e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <HAL_TIM_PWM_Start+0x20c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_TIM_PWM_Start+0x13e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3a      	ldr	r2, [pc, #232]	; (800371c <HAL_TIM_PWM_Start+0x210>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_TIM_PWM_Start+0x13e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a39      	ldr	r2, [pc, #228]	; (8003720 <HAL_TIM_PWM_Start+0x214>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIM_PWM_Start+0x13e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a37      	ldr	r2, [pc, #220]	; (8003724 <HAL_TIM_PWM_Start+0x218>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_TIM_PWM_Start+0x142>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_TIM_PWM_Start+0x144>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <HAL_TIM_PWM_Start+0x208>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d02c      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003676:	d027      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <HAL_TIM_PWM_Start+0x21c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a29      	ldr	r2, [pc, #164]	; (800372c <HAL_TIM_PWM_Start+0x220>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d01d      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <HAL_TIM_PWM_Start+0x224>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_PWM_Start+0x20c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_TIM_PWM_Start+0x228>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_TIM_PWM_Start+0x210>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_TIM_PWM_Start+0x22c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1bc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_TIM_PWM_Start+0x230>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d115      	bne.n	80036f4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_TIM_PWM_Start+0x234>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d015      	beq.n	8003706 <HAL_TIM_PWM_Start+0x1fa>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d011      	beq.n	8003706 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	e008      	b.n	8003706 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e000      	b.n	8003708 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	40010400 	.word	0x40010400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40001800 	.word	0x40001800
 8003738:	4000e000 	.word	0x4000e000
 800373c:	4000e400 	.word	0x4000e400
 8003740:	00010007 	.word	0x00010007

08003744 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e08f      	b.n	8003878 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fe f85b 	bl	8001828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_TIM_Encoder_Init+0x13c>)
 8003786:	400b      	ands	r3, r1
 8003788:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f000 fb65 	bl	8003e64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_TIM_Encoder_Init+0x140>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	4313      	orrs	r3, r2
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_TIM_Encoder_Init+0x144>)
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_TIM_Encoder_Init+0x148>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	4313      	orrs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	011a      	lsls	r2, r3, #4
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	031b      	lsls	r3, r3, #12
 8003804:	4313      	orrs	r3, r2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4313      	orrs	r3, r2
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fffebff8 	.word	0xfffebff8
 8003884:	fffffcfc 	.word	0xfffffcfc
 8003888:	fffff3f3 	.word	0xfffff3f3
 800388c:	ffff0f0f 	.word	0xffff0f0f

08003890 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d110      	bne.n	80038e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038c6:	7b7b      	ldrb	r3, [r7, #13]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e069      	b.n	80039a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	e031      	b.n	8003946 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d110      	bne.n	800390a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e8:	7bbb      	ldrb	r3, [r7, #14]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ee:	7b3b      	ldrb	r3, [r7, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e055      	b.n	80039a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003908:	e01d      	b.n	8003946 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d108      	bne.n	8003922 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003910:	7bbb      	ldrb	r3, [r7, #14]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d105      	bne.n	8003922 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003916:	7b7b      	ldrb	r3, [r7, #13]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800391c:	7b3b      	ldrb	r3, [r7, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e03e      	b.n	80039a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_TIM_Encoder_Start+0xc4>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d008      	beq.n	8003964 <HAL_TIM_Encoder_Start+0xd4>
 8003952:	e00f      	b.n	8003974 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fdfd 	bl	800455c <TIM_CCxChannelCmd>
      break;
 8003962:	e016      	b.n	8003992 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	2104      	movs	r1, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fdf5 	bl	800455c <TIM_CCxChannelCmd>
      break;
 8003972:	e00e      	b.n	8003992 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fded 	bl	800455c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2104      	movs	r1, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fde6 	bl	800455c <TIM_CCxChannelCmd>
      break;
 8003990:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0202 	mvn.w	r2, #2
 80039d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa1a 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa0c 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa1d 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0204 	mvn.w	r2, #4
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9f0 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9e2 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9f3 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0208 	mvn.w	r2, #8
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2204      	movs	r2, #4
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9c6 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9b8 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9c9 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0210 	mvn.w	r2, #16
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f99c 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f98e 	bl	8003e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f99f 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0201 	mvn.w	r2, #1
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fa52 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	2b80      	cmp	r3, #128	; 0x80
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fe6c 	bl	8004834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d10e      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d107      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fe5f 	bl	8004848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f94d 	bl	8003e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d10e      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0220 	mvn.w	r2, #32
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fe1f 	bl	8004820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0ff      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b14      	cmp	r3, #20
 8003c16:	f200 80f0 	bhi.w	8003dfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003dfb 	.word	0x08003dfb
 8003c28:	08003dfb 	.word	0x08003dfb
 8003c2c:	08003dfb 	.word	0x08003dfb
 8003c30:	08003cb5 	.word	0x08003cb5
 8003c34:	08003dfb 	.word	0x08003dfb
 8003c38:	08003dfb 	.word	0x08003dfb
 8003c3c:	08003dfb 	.word	0x08003dfb
 8003c40:	08003cf7 	.word	0x08003cf7
 8003c44:	08003dfb 	.word	0x08003dfb
 8003c48:	08003dfb 	.word	0x08003dfb
 8003c4c:	08003dfb 	.word	0x08003dfb
 8003c50:	08003d37 	.word	0x08003d37
 8003c54:	08003dfb 	.word	0x08003dfb
 8003c58:	08003dfb 	.word	0x08003dfb
 8003c5c:	08003dfb 	.word	0x08003dfb
 8003c60:	08003d79 	.word	0x08003d79
 8003c64:	08003dfb 	.word	0x08003dfb
 8003c68:	08003dfb 	.word	0x08003dfb
 8003c6c:	08003dfb 	.word	0x08003dfb
 8003c70:	08003db9 	.word	0x08003db9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f998 	bl	8003fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	619a      	str	r2, [r3, #24]
      break;
 8003cb2:	e0a5      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa08 	bl	80040d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
      break;
 8003cf4:	e084      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa71 	bl	80041e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0208 	orr.w	r2, r2, #8
 8003d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
      break;
 8003d34:	e064      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fad9 	bl	80042f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	021a      	lsls	r2, r3, #8
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
      break;
 8003d76:	e043      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fb22 	bl	80043c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003db6:	e023      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fb66 	bl	8004490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	021a      	lsls	r2, r3, #8
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003df8:	e002      	b.n	8003e00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop

08003e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a44      	ldr	r2, [pc, #272]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a41      	ldr	r2, [pc, #260]	; (8003f8c <TIM_Base_SetConfig+0x128>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a40      	ldr	r2, [pc, #256]	; (8003f90 <TIM_Base_SetConfig+0x12c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <TIM_Base_SetConfig+0x130>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3e      	ldr	r2, [pc, #248]	; (8003f98 <TIM_Base_SetConfig+0x134>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a33      	ldr	r2, [pc, #204]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d027      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d023      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2e      	ldr	r2, [pc, #184]	; (8003f94 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	; (8003f98 <TIM_Base_SetConfig+0x134>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <TIM_Base_SetConfig+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <TIM_Base_SetConfig+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <TIM_Base_SetConfig+0x140>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_Base_SetConfig+0x144>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0xaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <TIM_Base_SetConfig+0x148>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00f      	beq.n	8003f6c <TIM_Base_SetConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <TIM_Base_SetConfig+0x134>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_Base_SetConfig+0x108>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <TIM_Base_SetConfig+0x138>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_Base_SetConfig+0x108>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_Base_SetConfig+0x13c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0x108>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <TIM_Base_SetConfig+0x140>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	615a      	str	r2, [r3, #20]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	4000e000 	.word	0x4000e000
 8003fac:	4000e400 	.word	0x4000e400

08003fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4b37      	ldr	r3, [pc, #220]	; (80040b8 <TIM_OC1_SetConfig+0x108>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 0302 	bic.w	r3, r3, #2
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <TIM_OC1_SetConfig+0x10c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00f      	beq.n	800402c <TIM_OC1_SetConfig+0x7c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <TIM_OC1_SetConfig+0x110>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00b      	beq.n	800402c <TIM_OC1_SetConfig+0x7c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <TIM_OC1_SetConfig+0x114>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <TIM_OC1_SetConfig+0x7c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <TIM_OC1_SetConfig+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d003      	beq.n	800402c <TIM_OC1_SetConfig+0x7c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <TIM_OC1_SetConfig+0x11c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10c      	bne.n	8004046 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0308 	bic.w	r3, r3, #8
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <TIM_OC1_SetConfig+0x10c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00f      	beq.n	800406e <TIM_OC1_SetConfig+0xbe>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <TIM_OC1_SetConfig+0x110>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00b      	beq.n	800406e <TIM_OC1_SetConfig+0xbe>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <TIM_OC1_SetConfig+0x114>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <TIM_OC1_SetConfig+0xbe>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <TIM_OC1_SetConfig+0x118>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_OC1_SetConfig+0xbe>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <TIM_OC1_SetConfig+0x11c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d111      	bne.n	8004092 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	fffeff8f 	.word	0xfffeff8f
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800

080040d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0210 	bic.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4b34      	ldr	r3, [pc, #208]	; (80041cc <TIM_OC2_SetConfig+0xfc>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <TIM_OC2_SetConfig+0x100>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC2_SetConfig+0x68>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <TIM_OC2_SetConfig+0x104>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10d      	bne.n	8004154 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <TIM_OC2_SetConfig+0x100>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00f      	beq.n	800417c <TIM_OC2_SetConfig+0xac>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <TIM_OC2_SetConfig+0x104>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00b      	beq.n	800417c <TIM_OC2_SetConfig+0xac>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1c      	ldr	r2, [pc, #112]	; (80041d8 <TIM_OC2_SetConfig+0x108>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_OC2_SetConfig+0xac>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <TIM_OC2_SetConfig+0x10c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0xac>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <TIM_OC2_SetConfig+0x110>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	feff8fff 	.word	0xfeff8fff
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40014400 	.word	0x40014400
 80041e0:	40014800 	.word	0x40014800

080041e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <TIM_OC3_SetConfig+0xf8>)
 8004210:	4013      	ands	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800422c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <TIM_OC3_SetConfig+0xfc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_OC3_SetConfig+0x66>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <TIM_OC3_SetConfig+0x100>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10d      	bne.n	8004266 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <TIM_OC3_SetConfig+0xfc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00f      	beq.n	800428e <TIM_OC3_SetConfig+0xaa>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <TIM_OC3_SetConfig+0x100>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00b      	beq.n	800428e <TIM_OC3_SetConfig+0xaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <TIM_OC3_SetConfig+0x104>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <TIM_OC3_SetConfig+0xaa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <TIM_OC3_SetConfig+0x108>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_OC3_SetConfig+0xaa>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <TIM_OC3_SetConfig+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	fffeff8f 	.word	0xfffeff8f
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800

080042f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <TIM_OC4_SetConfig+0xbc>)
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <TIM_OC4_SetConfig+0xc0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00f      	beq.n	8004374 <TIM_OC4_SetConfig+0x80>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <TIM_OC4_SetConfig+0xc4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00b      	beq.n	8004374 <TIM_OC4_SetConfig+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <TIM_OC4_SetConfig+0xc8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_OC4_SetConfig+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <TIM_OC4_SetConfig+0xcc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <TIM_OC4_SetConfig+0xd0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	feff8fff 	.word	0xfeff8fff
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40010400 	.word	0x40010400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800

080043c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4b21      	ldr	r3, [pc, #132]	; (8004478 <TIM_OC5_SetConfig+0xb0>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <TIM_OC5_SetConfig+0xb4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_OC5_SetConfig+0x76>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a17      	ldr	r2, [pc, #92]	; (8004480 <TIM_OC5_SetConfig+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_OC5_SetConfig+0x76>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a16      	ldr	r2, [pc, #88]	; (8004484 <TIM_OC5_SetConfig+0xbc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_OC5_SetConfig+0x76>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a15      	ldr	r2, [pc, #84]	; (8004488 <TIM_OC5_SetConfig+0xc0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC5_SetConfig+0x76>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <TIM_OC5_SetConfig+0xc4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d109      	bne.n	8004452 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	fffeff8f 	.word	0xfffeff8f
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <TIM_OC6_SetConfig+0xb4>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	051b      	lsls	r3, r3, #20
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a19      	ldr	r2, [pc, #100]	; (8004548 <TIM_OC6_SetConfig+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00f      	beq.n	8004508 <TIM_OC6_SetConfig+0x78>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <TIM_OC6_SetConfig+0xbc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00b      	beq.n	8004508 <TIM_OC6_SetConfig+0x78>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <TIM_OC6_SetConfig+0xc0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <TIM_OC6_SetConfig+0x78>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <TIM_OC6_SetConfig+0xc4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_OC6_SetConfig+0x78>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <TIM_OC6_SetConfig+0xc8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d109      	bne.n	800451c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	029b      	lsls	r3, r3, #10
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	621a      	str	r2, [r3, #32]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	feff8fff 	.word	0xfeff8fff
 8004548:	40010000 	.word	0x40010000
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800

0800455c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2201      	movs	r2, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	43db      	mvns	r3, r3
 800457e:	401a      	ands	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045bc:	2302      	movs	r3, #2
 80045be:	e077      	b.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a35      	ldr	r2, [pc, #212]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a34      	ldr	r2, [pc, #208]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a25      	ldr	r2, [pc, #148]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d02c      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d027      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d022      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d01d      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d018      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00e      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10c      	bne.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4313      	orrs	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40001800 	.word	0x40001800
 80046d4:	40014000 	.word	0x40014000
 80046d8:	4000e000 	.word	0x4000e000
 80046dc:	4000e400 	.word	0x4000e400

080046e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e087      	b.n	800480c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a25      	ldr	r2, [pc, #148]	; (800481c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d106      	bne.n	8004798 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1d      	ldr	r2, [pc, #116]	; (800481c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d126      	bne.n	80047fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	051b      	lsls	r3, r3, #20
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a0d      	ldr	r2, [pc, #52]	; (800481c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d106      	bne.n	80047fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4d0d      	ldr	r5, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4d0b      	ldr	r5, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 f820 	bl	80048b4 <_init>
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080048dc 	.word	0x080048dc
 8004898:	080048dc 	.word	0x080048dc
 800489c:	080048dc 	.word	0x080048dc
 80048a0:	080048e8 	.word	0x080048e8

080048a4 <memset>:
 80048a4:	4402      	add	r2, r0
 80048a6:	4603      	mov	r3, r0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	f803 1b01 	strb.w	r1, [r3], #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
